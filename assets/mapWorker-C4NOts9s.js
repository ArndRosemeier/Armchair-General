var te=Object.defineProperty;var ne=($,R,D)=>R in $?te($,R,{enumerable:!0,configurable:!0,writable:!0,value:D}):$[R]=D;var M=($,R,D)=>ne($,typeof R!="symbol"?R+"":R,D);(function(){"use strict";class ${constructor(e=[]){M(this,"countries");this.countries=e}}const R=Math.sqrt(3),D=.5*(R-1),G=(3-R)/6,P=u=>Math.floor(u)|0,W=new Float64Array([1,1,-1,1,1,-1,-1,-1,1,0,-1,0,1,0,-1,0,0,1,0,-1,0,1,0,-1]);function H(u=Math.random){const e=K(u),n=new Float64Array(e).map(r=>W[r%12*2]),t=new Float64Array(e).map(r=>W[r%12*2+1]);return function(o,s){let c=0,l=0,m=0;const i=(o+s)*D,d=P(o+i),y=P(s+i),w=(d+y)*G,g=d-w,f=y-w,S=o-g,A=s-f;let x,a;S>A?(x=1,a=0):(x=0,a=1);const h=S-x+G,b=A-a+G,I=S-1+2*G,N=A-1+2*G,B=d&255,v=y&255;let C=.5-S*S-A*A;if(C>=0){const E=B+e[v],q=n[E],O=t[E];C*=C,c=C*C*(q*S+O*A)}let p=.5-h*h-b*b;if(p>=0){const E=B+x+e[v+a],q=n[E],O=t[E];p*=p,l=p*p*(q*h+O*b)}let F=.5-I*I-N*N;if(F>=0){const E=B+1+e[v+1],q=n[E],O=t[E];F*=F,m=F*F*(q*I+O*N)}return 70*(c+l+m)}}function K(u){const n=new Uint8Array(512);for(let t=0;t<512/2;t++)n[t]=t;for(let t=0;t<512/2-1;t++){const r=t+~~(u()*(256-t)),o=n[t];n[t]=n[r],n[r]=o}for(let t=256;t<512;t++)n[t]=n[t-256];return n}function T(u,e,n,t=1e3){var m;const r=u.length,o=((m=u[0])==null?void 0:m.length)||0,s=Array.from({length:r},()=>Array(o).fill(!1)),c=[[1,0],[-1,0],[0,1],[0,-1]],l=u.map(i=>i.slice());for(let i=0;i<r;i++)for(let d=0;d<o;d++)if(!s[i][d]&&u[i][d]===n){const y=[[i,d]],w=[[i,d]];for(s[i][d]=!0;y.length;){const[g,f]=y.shift();for(const[S,A]of c){const x=g+S,a=f+A;x>=0&&x<r&&a>=0&&a<o&&!s[x][a]&&u[x][a]===n&&(s[x][a]=!0,y.push([x,a]),w.push([x,a]))}}if(w.length<t)for(const[g,f]of w)l[g][f]=e}return l}function Y(u,e,n){var m;const t=u.length,r=((m=u[0])==null?void 0:m.length)||0,o=Array.from({length:t},()=>Array(r).fill(!1)),s=[];for(let i=0;i<r;i++)u[0][i]===e&&(s.push([0,i]),o[0][i]=!0),u[t-1][i]===e&&(s.push([t-1,i]),o[t-1][i]=!0);for(let i=1;i<t-1;i++)u[i][0]===e&&(s.push([i,0]),o[i][0]=!0),u[i][r-1]===e&&(s.push([i,r-1]),o[i][r-1]=!0);const c=[[1,0],[-1,0],[0,1],[0,-1]];for(;s.length;){const[i,d]=s.shift();for(const[y,w]of c){const g=i+y,f=d+w;g>=0&&g<t&&f>=0&&f<r&&!o[g][f]&&u[g][f]===e&&(o[g][f]=!0,s.push([g,f]))}}return u.map((i,d)=>i.map((y,w)=>y===e&&!o[d][w]?n:y))}function X(u,e){return U(u,e,{scale:.0018,threshold:-.05,borderStrength:.5,borderWidth:.15,octaves:6,persistence:.5,seed:Math.floor(Math.random()*1e9)})}function U(u,e,n){const t=(n==null?void 0:n.scale)??.015,r=(n==null?void 0:n.threshold)??0,o=(n==null?void 0:n.seed)!==void 0?Q(n.seed):Math.random,s=H(o),c=(n==null?void 0:n.borderStrength)??.5,l=(n==null?void 0:n.borderWidth)??.2,m=(n==null?void 0:n.octaves)??4,i=(n==null?void 0:n.persistence)??.5,d=[];for(let w=0;w<e;w++){const g=[];for(let f=0;f<u;f++){const S=f-u/2,A=w-e/2;let x=0,a=0,h=1,b=1;for(let C=0;C<m;C++)x+=s(S*t*h,A*t*h)*b,a+=b,b*=i,h*=2;x/=a;const I=Math.min(f,u-1-f)/(u/2),N=Math.min(w,e-1-w)/(e/2),B=Math.min(I,N);let v=x;if(B<l){const C=c*(1-B/l);v=x*(1-C)+L*C}g.push(v>r?k:L)}d.push(g)}let y=Y(d,L,k);return y=T(y,L,k,1e3),y}function Q(u){return function(){let e=u+=1831565813;return e=Math.imul(e^e>>>15,e|1),e^=e+Math.imul(e^e>>>7,e|61),((e^e>>>14)>>>0)/4294967296}}class j{constructor(e,n=null,t=0,r=0){M(this,"name");M(this,"owner");M(this,"armies");M(this,"income");M(this,"coordinates");M(this,"border");M(this,"oceanBorder");M(this,"neighbors");M(this,"color");M(this,"fortified",!1);M(this,"nationalPride");M(this,"unrestLevel",0);M(this,"_center",null);this.name=e,this.owner=n,this.armies=t,this.income=r,this.coordinates=[],this.border=[],this.oceanBorder=[],this.neighbors=[],this.color=[Math.floor(80+Math.random()*150),Math.floor(80+Math.random()*150),Math.floor(80+Math.random()*150)];const o=1e3,s=1e5,c=Math.random()*Math.random();this.nationalPride=Math.floor(o+(s-o)*c),this.unrestLevel=0}setOwner(e){this.owner=e}setArmies(e){this.armies=e}center(){if(this._center)return this._center;if(!this.coordinates.length)return this._center=[0,0],this._center;let e=0,n=0;for(const[t,r]of this.coordinates)e+=t,n+=r;return this._center=[e/this.coordinates.length,n/this.coordinates.length],this._center}canBeFortified(){if(this.fortified)return!1;if(this.owner){for(const[e,n]of this.owner.plannedFortifications)if(e===this)return!1}return!0}toJSON(){return{id:this.name,name:this.name,ownerId:this.owner?this.owner.name:null,armies:this.armies,income:this.income,coordinates:this.coordinates,border:this.border,oceanBorder:this.oceanBorder,neighborIds:this.neighbors.map(e=>e.name),color:this.color,fortified:this.fortified,nationalPride:this.nationalPride,unrestLevel:this.unrestLevel}}static fromJSON(e,n,t){const r=new j(e.name,null,e.armies,e.income);return r.coordinates=e.coordinates,r.border=e.border,r.oceanBorder=e.oceanBorder,r.color=e.color,r.fortified=e.fortified,r.nationalPride=e.nationalPride??1e3,r.unrestLevel=e.unrestLevel??0,r._ownerId=e.ownerId,r._neighborIds=e.neighborIds,t[e.name]=r,r}resolveReferences(e,n){this.owner=this._ownerId?e[this._ownerId]:null,this.neighbors=(this._neighborIds||[]).map(t=>n[t]).filter(Boolean),delete this._ownerId,delete this._neighborIds}}class Z{static generateCountriesMap(e,n={}){if(!e||e.length===0||!e[0])throw new Error("continentMap must be a non-empty 2D array");const t=e.length,r=e[0].length,o=n.countryCount??12,s=n.scale??.09,c=n.minResistance??10,l=n.maxResistance??50,m=n.skipProbability??.9,i=n.seed!==void 0?V(n.seed):Math.random,d=H(i),y=[];for(let a=0;a<t;a++){const h=[];for(let b=0;b<r;b++)h.push(e[a][b]===k?c+(l-c)*Math.abs(d(b*s,a*s)):1/0);y.push(h)}const w=[],g=[];for(let a=0;a<t;a++)for(let h=0;h<r;h++)e[a][h]===k&&g.push([h,a]);for(let a=0;a<o&&g.length>0;a++){const h=Math.floor(i()*g.length),[b,I]=g.splice(h,1)[0];w.push({x:b,y:I,idx:a})}for(let a=0;a<t;a++)for(let h=0;h<r;h++)e[a][h]!==L&&(e[a][h]=k);for(const{x:a,y:h,idx:b}of w)e[h][a]=b;const f=w.map(({x:a,y:h,idx:b})=>[a,h,b]),S=(c+l)/2;for(;f.length>0;){const a=Math.floor(i()*f.length),[h,b,I]=f.splice(a,1)[0],N=[];for(const[B,v]of[[1,0],[0,1],[-1,0],[0,-1]]){const C=h+B,p=b+v;C>=0&&C<r&&p>=0&&p<t&&e[p][C]===k&&N.push([C,p])}if(N.length!==0)for(const[B,v]of N)y[v][B]>S&&i()<m||(e[v][B]=I,f.push([B,v,I]))}const A=Array.from({length:t},()=>Array(r).fill(!1));let x=0;for(let a=0;a<t;a++)for(let h=0;h<r;h++)e[a][h]>=0&&e[a][h]+1>x&&(x=e[a][h]+1);for(let a=0;a<t;a++)for(let h=0;h<r;h++)if(e[a][h]===k&&!A[a][h]){const b=[[h,a]];for(A[a][h]=!0;b.length>0;){const[I,N]=b.pop();e[N][I]=x;for(const[B,v]of[[1,0],[0,1],[-1,0],[0,-1]]){const C=I+B,p=N+v;C>=0&&C<r&&p>=0&&p<t&&e[p][C]===k&&!A[p][C]&&(b.push([C,p]),A[p][C]=!0)}}x++}return e}static generateCountriesInternal(e,n){const t=this.generateCountriesMap(e,n);if(!t||t.length===0||!t[0])throw new Error("map must be a non-empty 2D array");const r=t.length,o=t[0].length,s={};for(let m=0;m<r;m++)for(let i=0;i<o;i++){const d=t[m][i];if(d>=0){if(!s[d]){const y=new j(`Country ${d}`);y.id=d,s[d]=y}s[d].coordinates.push([i,m])}}const c=Math.max(...Object.keys(s).map(Number)),l=Array.from({length:c+1},(m,i)=>s[i]);return this.findCountryBorders(t,l,o,r),{map:t,countries:l}}static findCountryBorders(e,n,t,r){const o=[[1,0],[0,1],[-1,0],[0,-1]];for(const s of n){const c=s.id;s.border=[],s.oceanBorder=[];for(const[l,m]of s.coordinates){let i=!1,d=!1;for(const[y,w]of o){const g=l+y,f=m+w;(g<0||g>=t||f<0||f>=r||e[f][g]!==c)&&(i=!0,(g<0||g>=t||f<0||f>=r||e[f][g]===L)&&(d=!0))}i&&s.border.push([l,m]),d&&s.oceanBorder.push([l,m])}}}static findNeighbors(e){const n=new Map;for(const t of e)for(const[r,o]of t.border)n.set(`${r},${o}`,t);for(const t of e){const r=new Set;for(const[o,s]of t.border)for(const[c,l]of[[1,0],[0,1],[-1,0],[0,-1]]){const m=o+c,i=s+l,d=n.get(`${m},${i}`);d&&d!==t&&r.add(d)}t.neighbors=Array.from(r)}}static mergeSmallCountries(e,n=1e3,t){let r=!0;for(;r;){r=!1;for(let o=e.length-1;o>=0;o--){const s=e[o];if(s.coordinates.length<n&&s.neighbors.length>0){let c=s.neighbors[0];for(const l of s.neighbors)l.coordinates.length<c.coordinates.length&&(c=l);if(c.coordinates.push(...s.coordinates),t&&c.id!==void 0&&s.id!==void 0)for(const[l,m]of s.coordinates)t[m][l]=c.id;e.splice(o,1),r=!0}}r&&(this.findNeighbors(e),console.log("Merged countries"))}}static generateCountries(e,n={}){const{map:t,countries:r}=this.generateCountriesInternal(e,n);this.findNeighbors(r);const o=(n==null?void 0:n.minCountrySize)??1e3;if(this.mergeSmallCountries(r,o,t),!t||t.length===0||!t[0])throw new Error("map must be a non-empty 2D array");const s=t[0].length,c=t.length;return this.findCountryBorders(t,r,s,c),this.findNeighbors(r),{map:t,countries:r}}}function V(u){return function(){let e=u+=1831565813;return e=Math.imul(e^e>>>15,e|1),e^=e+Math.imul(e^e>>>7,e|61),((e^e>>>14)>>>0)/4294967296}}function ee(u,e){return Z.generateCountries(u,{countryCount:e,minResistance:0,maxResistance:130,skipProbability:0})}const L=-1,k=-2,z=class z{constructor(e,n,t=[]){M(this,"countries");M(this,"map");M(this,"continents",[]);this.countries=t,this.map=z.createOceanMap(e,n)}static logCountryNamesInOrder(e,n=""){const t=e.map((r,o)=>`${o}: ${r.name}`);console.log(`[WorldMap] Country order${n?" - "+n:""}:
`+t.join(", "))}static checkMapCountryConsistency(e,n){if(!Array.isArray(e)||!Array.isArray(n))return console.error("[WorldMap] Consistency check failed: map or countries not arrays"),!1;let t=!0;for(let r=0;r<e.length;++r)for(let o=0;o<e[r].length;++o){const s=e[r][o];s>=0&&(n[s]?typeof n[s].name!="string"&&(console.error(`[WorldMap] Inconsistent: countries[${s}] has no valid name at map[${r}][${o}]`),t=!1):(console.error(`[WorldMap] Inconsistent: map[${r}][${o}] = ${s}, but countries[${s}] is undefined`),t=!1))}return t}assignRandomCountryNames(){let e=!1;for(;!e;){const n=new Set;for(const t of this.countries){let r,o=0;do if(r=z.generateRandomName(),o++,o>1e3)throw new Error("Failed to generate unique random country names");while(n.has(r));t.name=r,n.add(r)}e=n.size===this.countries.length}}assignRealCountryNames(){let e=!1;for(;!e;){const n=[...z.REAL_COUNTRY_NAMES],t=new Set;for(const r of this.countries){let o;if(n.length>0){const s=Math.floor(Math.random()*n.length);o=n.splice(s,1)[0]}else{let s=0;do if(o=z.generateRandomName(),s++,s>1e3)throw new Error("Failed to generate unique fallback country names");while(t.has(o))}r.name=o,t.add(o)}e=t.size===this.countries.length}}static generateRandomName(){const e=["zan","mor","vek","tal","rin","dor","lek","sha","val","nor","ka","bel","dra","sil","tur","gar","fen","mir","sol","vor","lin","sar","qu","zel","ron","bar","zen","tir","lom","kal","vin","lor","mel","dar","gol","han","jor","ken","lun","mar"],n=2+Math.floor(Math.random()*2);let t="";for(let r=0;r<n;r++)t+=e[Math.floor(Math.random()*e.length)];return t.charAt(0).toUpperCase()+t.slice(1)}static createOceanMap(e,n){return Array.from({length:n},()=>Array(e).fill(L))}static generateContinentsMap(e,n,t){return U(e,n,t)}static createMap(e,n,t=40,r=!0){const o=X(e,n),{map:s,countries:c}=ee(o,t),l=new z(e,n,c);return l.map=s,r?l.assignRealCountryNames():l.assignRandomCountryNames(),l.regenerateMapFromCountries(l.countries),l.createContinents(),l}addCountry(e){this.countries.push(e)}createContinents(){const e=new Set,n=[];for(const t of this.countries)if(!e.has(t)){const r=[t],o=[];for(e.add(t);r.length>0;){const s=r.shift();o.push(s);for(const c of s.neighbors)e.has(c)||(e.add(c),r.push(c))}n.push(new $(o))}this.continents=n}getCountries(){return this.countries}distance(e,n){const[t,r]=e.center(),[o,s]=n.center(),c=Math.sqrt((t-o)**2+(r-s)**2);if(e.neighbors.includes(n)||n.neighbors.includes(e))return c;const l=e.oceanBorder&&e.oceanBorder.length>0,m=n.oceanBorder&&n.oceanBorder.length>0;return l&&m?c*3:null}getMap(){return this.map}regenerateMapFromCountries(e){if(!this.map||!Array.isArray(this.map)||this.map.length===0||this.map[0].length===0)throw new Error("WorldMap.map is not initialized or has invalid dimensions");const n=this.map.length,t=this.map[0].length,r=z.createOceanMap(t,n);for(let o=0;o<e.length;++o){const s=e[o];if(!s.coordinates||!Array.isArray(s.coordinates))throw new Error(`Country at index ${o} has no valid coordinates array`);for(const[c,l]of s.coordinates){if(typeof c!="number"||typeof l!="number"||c<0||c>=t||l<0||l>=n)throw new Error(`Country index ${o} has out-of-bounds coordinate (${c}, ${l})`);r[l][c]=o}}this.map=r}};M(z,"REAL_COUNTRY_NAMES",["Afghanistan","Albania","Algeria","Andorra","Angola","Argentina","Armenia","Australia","Austria","Azerbaijan","Bahamas","Bahrain","Bangladesh","Barbados","Belarus","Belgium","Belize","Benin","Bhutan","Bolivia","Bosnia and Herzegovina","Botswana","Brazil","Brunei","Bulgaria","Burkina Faso","Burundi","Cabo Verde","Cambodia","Cameroon","Canada","Central African Republic","Chad","Chile","China","Colombia","Comoros","Congo","Costa Rica","Croatia","Cuba","Cyprus","Czechia","Denmark","Djibouti","Dominica","Dominican Republic","Ecuador","Egypt","El Salvador","Equatorial Guinea","Eritrea","Estonia","Eswatini","Ethiopia","Fiji","Finland","France","Gabon","Gambia","Georgia","Germany","Ghana","Greece","Grenada","Guatemala","Guinea","Guinea-Bissau","Guyana","Haiti","Honduras","Hungary","Iceland","India","Indonesia","Iran","Iraq","Ireland","Israel","Italy","Jamaica","Japan","Jordan","Kazakhstan","Kenya","Kiribati","Kuwait","Kyrgyzstan","Laos","Latvia","Lebanon","Lesotho","Liberia","Libya","Liechtenstein","Lithuania","Luxembourg","Madagascar","Malawi","Malaysia"]);let _=z;const J=self;J.onmessage=async u=>{const e=u.data;if(e.type==="generate"){const n=_.createMap(e.width,e.height,e.countryCount),t=n.getMap(),r=n.getCountries();_.checkMapCountryConsistency(t,r)||console.error("[WorldMap] Consistency check failed in worker before transfer!");const o={map:t,countries:r};J.postMessage({type:"done",result:o})}}})();
